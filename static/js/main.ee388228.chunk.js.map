{"version":3,"sources":["1.wav","2.wav","3.wav","4.wav","5.wav","6.wav","7.wav","8.wav","9.wav","0.wav","star.wav","p.wav","ring.mp3","redux/user.js","redux/actionTypes.js","redux/agent.js","redux/system.js","redux/stats.js","redux/workcode.js","shared/baseUrl.js","services/apiClient.js","config/user.js","redux/userActions.js","pages/Login.js","pages/Register.js","redux/agentActions.js","redux/statsActions.js","components/QueueStats.js","components/KeyPad.js","components/WorkcodeForm.js","pages/Softphone.js","redux/systemActions.js","redux/workcodeActions.js","pages/Main.js","App.js","redux/store.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","loggedIn","sessionStorage","getItem","isLoading","user","state","action","type","errMess","payload","initial","isReady","isLogin","reasons","message","currentChannel","agent","settings","system","status","stats","workcodes","workcode","cookieRoute","apiClient","axios","create","baseURL","withCredentials","headers","allowedUsers","logoutUser","dispatch","loading","post","then","response","logoutSuccess","removeItem","loginSuccess","error","userSuccess","userFailed","layout","labelCol","span","wrapperCol","tailLayout","offset","connect","loginUser","username","password","get","console","log","indexOf","data","setItem","catch","props","useState","setUsername","setPassword","setError","history","useHistory","useEffect","push","name","initialValues","remember","onFinish","values","onFinishFailed","errorInfo","title","subTitle","Item","label","rules","required","Password","valuePropName","htmlType","formItemLayout","xs","sm","tailFormItemLayout","Register","Form","useForm","form","residence","prefix","scrollToFirstError","hasFeedback","dependencies","getFieldValue","validator","rule","value","Promise","reject","resolve","QuestionCircleOutlined","whitespace","defaults","isReadyAgent","isAgentReadySuccess","isAgentReadyFailed","readyAgent","reason","readySuccess","readyFailed","notReadyAgent","notReadySuccess","notReadyFailed","getReasons","reasonSuccess","reasonFailed","getChannelSuccess","channel","getChannelFailed","submitWorkcodeSuccess","submitWorkcodeFailed","loginFailed","logoutFailed","fetchStatus","statusLoading","statusSuccess","statusFailed","gridStyle","width","textAlign","QueueStats","nStats","useDispatch","useSelector","size","spinning","style","bordered","Object","keys","map","key","index","Grid","formatter","fontSize","KeyPad","onCall","onKeyPadClick","onMuteClick","onHoldClick","onHold","onMute","agentMode","direction","item","onClick","shape","justify","disabled","icon","AudioMutedOutlined","onDialClick","backgroundColor","PhoneTwoTone","twoToneColor","PauseCircleFilled","WorkcodeForm","setVisible","visible","onCreate","code","sendWorkcode","okText","centered","closable","onOk","validateFields","resetFields","info","Option","id","marginStyles","marginBottom","Softphone","audios","Audio","soundZero","soundOne","soundTwo","soundThree","soundFour","soundFive","soundSix","soundSeven","soundEight","soundNine","soundHash","soundStar","ring","incomingRing","options","res","userAgentDelegate","onConnect","setConnection","openNotificationWithIcon","onDisconnect","onRegister","registration","onInvite","invitation","setIncomingSession","setIncomingCall","setIncomingNumber","remoteIdentity","uri","delegate","onRefer","referral","stateChange","addListener","newState","SessionState","Establishing","Established","setOnCall","setCallStatus","setupRemoteMedia","Terminated","setWorkcodeVisible","cleanupMedia","sessionDescriptionHandlerOptions","constraints","audio","video","Modal","confirm","content","cancelText","accept","onCancel","registererState","RegistererState","Registered","setRegister","Unregistered","workcodeVisible","server","setServer","userName","setUserName","setUserType","setName","userAgent","setUserAgent","registerer","setRegisterer","setAgentMode","blendMode","setBlendMode","server_address","auth_username","UserAgent","authorizationUsername","authorizationPassword","auth_password","transportOptions","wss_port","makeURI","logLevel","Registerer","start","removeListener","optionValue","register","connection","callStatus","incomingCall","incomingNumber","incomingSession","setOutgoingCall","setOutgoingNumber","outgoingSession","setOutgoingSession","setOnHold","setOnMute","inputNumber","setInputNumber","timer","setTimer","intervalId","setIntervalId","mediaElement","useRef","MediaStream","remoteStream","interval","setInterval","clearInterval","session","sessionDescriptionHandler","peerConnection","getReceivers","forEach","receiver","track","addTrack","current","srcObject","play","pause","playSound","load","loop","SECONDS","Date","toISOString","substr","currentTime","destroyAll","notification","description","hold","sessionDescriptionHandlerModifiers","Web","holdModifier","invite","unhold","handleKeys","onKeyEvent","event","target","document","getElementsByTagName","slice","handleFocusableElements","gutter","lg","align","onSelect","defaultValue","danger","unregister","r","AlertTwoTone","CheckCircleOutlined","color","float","marginRight","Text","keyboard","strong","onChange","autoFocus","placeholder","ref","senders","getSenders","length","sender","enabled","currentSession","Inviter","cancel","Invitation","bye","inviter","Initial","Terminating","Error","settingSuccess","setting","settingFailed","getWorkcodeSuccess","getWorkcodeFailed","PrivateRoute","children","rest","path","render","location","to","pathname","from","Main","Header","Layout","Content","Footer","useLocation","className","hasSider","inlineCollapsed","theme","mode","defaultSelectedKeys","selectedKeys","padding","margin","exact","component","Login","href","store","createStore","combineReducers","applyMiddleware","thunk","logger","App","Boolean","window","hostname","match","ReactDOM","Fragment","getElementById","navigator","serviceWorker","ready"],"mappings":"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","file":"static/js/main.ee388228.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.5cf31605.wav\";","module.exports = __webpack_public_path__ + \"static/media/2.e59b9072.wav\";","module.exports = __webpack_public_path__ + \"static/media/3.edc2da23.wav\";","module.exports = __webpack_public_path__ + \"static/media/4.ae1de26d.wav\";","module.exports = __webpack_public_path__ + \"static/media/5.1cdb9034.wav\";","module.exports = __webpack_public_path__ + \"static/media/6.9ba7805a.wav\";","module.exports = __webpack_public_path__ + \"static/media/7.ce7c77b6.wav\";","module.exports = __webpack_public_path__ + \"static/media/8.281df24a.wav\";","module.exports = __webpack_public_path__ + \"static/media/9.f25bbf24.wav\";","module.exports = __webpack_public_path__ + \"static/media/0.96f7c6f1.wav\";","module.exports = __webpack_public_path__ + \"static/media/star.1b621124.wav\";","module.exports = __webpack_public_path__ + \"static/media/p.248be4b3.wav\";","module.exports = __webpack_public_path__ + \"static/media/ring.ac6f9d10.mp3\";","import * as ActionTypes from \"./actionTypes\"\r\n\r\nconst initialState = {\r\n    loggedIn: sessionStorage.getItem('loggedIn') === \"true\" || false,\r\n    isLoading: false,\r\n    user: null,\r\n}\r\n\r\nexport const user = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n        case ActionTypes.LOGIN_LOADING:\r\n            return {...state, isLoading: true}\r\n        case ActionTypes.LOGIN_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload}\r\n        case ActionTypes.LOGIN_SUCCESS:\r\n            return {...state, isLoading: false, loggedIn: action.payload, errMess: null}\r\n        case ActionTypes.LOGOUT_SUCCESS:\r\n            return {...state, isLoading: false, loggedIn: false, errMess: action.payload, user: null}\r\n        case ActionTypes.USER_SUCCESS:\r\n            return {...state, isLoading: false, user: action.payload, errMess: null}\r\n        case ActionTypes.USER_FAILED:\r\n            return {...state, errMess: action.payload}\r\n    }\r\n}","\r\nexport const LOADING = 'LOADING'\r\nexport const FAILED = 'FAILED'\r\n\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\r\nexport const LOGIN_FAILED = 'LOGIN_FAILED'\r\nexport const LOGIN_LOADING = 'LOGIN_LOADING'\r\nexport const LOGOUT_SUCCESS = 'LOGOUT_SUCCESS'\r\n\r\nexport const AGENT_LOADING = 'AGENT_LOADING'\r\nexport const READY_FAILED = 'READY_FAILED'\r\nexport const READY_SUCCESS = 'READY_SUCCESS'\r\nexport const NOTREADY_FAILED = 'NOTREADY_FAILED'\r\nexport const NOTREADY_SUCCESS = 'NOTREADY_SUCCESS'\r\nexport const ISREADY_SUCCESS = 'ISREADY_SUCCESS'\r\nexport const ISREADY_FAILED = 'ISREADY_FAILED'\r\nexport const GETCHANNEL_SUCCESS = 'GETCHANNEL_SUCCESS'\r\nexport const GETCHANNEL_FAILED = 'GETCHANNEL_FAILED'\r\nexport const SUBMITWORKCODE_SUCCESS = 'SUBMITWORKCODE_SUCCESS'\r\nexport const SUBMITWORKCODE_FAILED = 'SUBMITWORKCODE_FAILED'\r\n\r\nexport const QLOGIN_SUCCESS = 'QLOGIN_SUCCESS'\r\nexport const QLOGIN_FAILED = 'QLOGIN_FAILED'\r\nexport const QLOGOUT_SUCCESS = 'QLOGOUT_SUCCESS'\r\nexport const QLOGOUT_FAILED = 'QLOGOUT_FAILED'\r\n\r\nexport const USER_SUCCESS = 'USER_SUCCESS'\r\nexport const USER_FAILED = 'USER_FAILED'\r\n\r\nexport const SYSTEM_LOADING = 'SYSTEM_LOADING'\r\nexport const SYSTEM_SUCCESS = 'SYSTEM_SUCCESS'\r\nexport const SYSTEM_FAILED = 'SYSTEM_FAILED'\r\n\r\nexport const REASON_SUCCESS = 'REASON_SUCCESS'\r\nexport const REASON_FAILED = 'REASON_SUCCESS'\r\n\r\nexport const STATUS_LOADING = 'STATUS_LOADING'\r\nexport const STATUS_SUCCESS = 'STATUS_SUCCESS'\r\nexport const STATUS_FAILED = 'STATUS_FAILED'\r\n\r\nexport const WORKCODE_LOADING = 'WORKCODE_LOADING'\r\nexport const WORKCODE_SUCCESS = 'WORKCODE_SUCCESS'\r\nexport const WORKCODE_FAILED = 'WORKCODE_FAILED'\r\n\r\nexport const GETWORKCODE_LOADING = 'GETWORKCODE_LOADING'\r\nexport const GETWORKCODE_SUCCESS = 'GETWORKCODE_SUCCESS'\r\nexport const GETWORKCODE_FAILED = 'GETWORKCODE_FAILED'","import * as ActionTypes from './actionTypes'\r\n\r\nconst initial = {\r\n    isReady: false,\r\n    isLogin: false,\r\n    isLoading: false,\r\n    errMess: null,\r\n    reasons: [],\r\n    message: '',\r\n    currentChannel: null\r\n}\r\n\r\nexport const agent = (state = initial, action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n        case ActionTypes.AGENT_LOADING:\r\n            return {...state, isLoading: true}\r\n        case ActionTypes.QLOGIN_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload}\r\n        case ActionTypes.QLOGIN_SUCCESS:\r\n            return {...state, isLoading: false, isLogin: true, message: action.payload}\r\n        case ActionTypes.QLOGOUT_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload}\r\n        case ActionTypes.QLOGOUT_SUCCESS:\r\n            return {...state, isLoading: false, isLogin: false}\r\n        case ActionTypes.READY_FAILED:\r\n            return {...state, isReady: false, isLoading: false, errMess: action.payload}\r\n        case ActionTypes.READY_SUCCESS:\r\n            return {...state, isReady: true, isLoading: false, errMess: null, message: action.payload}\r\n        case ActionTypes.NOTREADY_FAILED:\r\n            return {...state, isReady: true, isLoading: false, errMess: action.payload}\r\n        case ActionTypes.NOTREADY_SUCCESS:\r\n            return {...state, isReady: false, isLoading: false, errMess: null}\r\n        case ActionTypes.REASON_SUCCESS:\r\n            return {...state, reasons: action.payload, isLoading: false, errMess: null}\r\n        case ActionTypes.REASON_FAILED:\r\n            return {...state, reasons: [], errMess: action.payload, isLoading: false}\r\n        case ActionTypes.ISREADY_SUCCESS:\r\n            return {...state, errMess: null, isLoading: false, isReady: action.payload}\r\n        case ActionTypes.ISREADY_FAILED:\r\n            return {...state, errMess: action.payload, isLoading: false}\r\n        case ActionTypes.GETCHANNEL_SUCCESS:\r\n            return {...state, currentChannel: action.payload}\r\n        case ActionTypes.GETWORKCODE_FAILED:\r\n            return {...state, currentChannel: null, errMess: action.payload}\r\n        case ActionTypes.SUBMITWORKCODE_SUCCESS:\r\n            return {...state, message: action.payload}\r\n        case ActionTypes.SUBMITWORKCODE_FAILED:\r\n            return {...state, errMess: action.payload}\r\n\r\n    }\r\n}","import * as ActionTypes from './actionTypes'\r\n\r\nconst initial = {\r\n    settings: null,\r\n    errMess: null,\r\n    isLoading: false\r\n}\r\n\r\nexport const system = (state = initial, action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n        case ActionTypes.SYSTEM_LOADING:\r\n            return {...state, isLoading: true}\r\n        case ActionTypes.SYSTEM_SUCCESS:\r\n            return {...state, settings: action.payload, isLoading: false, errMess: null}\r\n        case ActionTypes.SYSTEM_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload}\r\n    }\r\n}","import * as ActionTypes from './actionTypes'\r\n\r\nconst initial = {\r\n    isLoading: false,\r\n    errMess: null,\r\n    status: []\r\n}\r\n\r\nexport const stats = (state = initial, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.STATUS_LOADING:\r\n            return {...state, isLoading: true}\r\n        case ActionTypes.STATUS_FAILED:\r\n            return {...state, isLoading: false, errMess: action.payload}\r\n        case ActionTypes.STATUS_SUCCESS:\r\n            return {...state, errMess: null, isLoading: false, status: action.payload}\r\n        default:\r\n            return {...state}\r\n    }\r\n}","import * as ActionTypes from \"./actionTypes\"\r\n\r\nconst initial = {\r\n    workcodes: [],\r\n    isLoading: false,\r\n    errMess: null\r\n}\r\n\r\nexport const workcode = (state = initial, action) => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n        case ActionTypes.GETWORKCODE_LOADING:\r\n            return {...state, isLoading: true}\r\n        case ActionTypes.GETWORKCODE_SUCCESS:\r\n            return {...state, workcodes: action.payload, isLoading: false}\r\n        case ActionTypes.GETWORKCODE_FAILED:\r\n            return {...state, errMess: action.payload}\r\n    }\r\n}","// export const baseUrl = 'http://localhost/contactplusapi/public';\r\n// export const baseUrl = 'https://api.contact-plus.com/contactplusapi/public'\r\nexport const baseUrl = 'https://api.contactplus.com'\r\nexport const cookieRoute = '/sanctum/csrf-cookie'\r\nexport const login = '/login';\r\nexport const register = '/register';\r\nexport const logout = '/logout';\r\n\r\nexport const agentLogin = '/api/agent/login'\r\nexport const agentLogout = '/api/agent/logout'\r\nexport const agentNotReady = '/api/agent/pause'\r\nexport const agentReady = '/api/agent/unpause'\r\nexport const agentStatus = '/api/agent/status'\r\nexport const agentChannel = '/api/agent/channel'\r\nexport const isAgentReady = '/api/agent/is-ready'\r\nexport const submitWorkcode = '/api/agent/workcode'\r\n\r\nexport const user = '/api/get-user'\r\nexport const getSystem = '/api/system-setting'\r\nexport const getReason = '/api/pause-reason'\r\nexport const getWorkcodes = '/api/workcode'","import axios from 'axios';\r\nimport {baseUrl} from \"../shared/baseUrl\";\r\n\r\nconst apiClient = axios.create({\r\n    baseURL: baseUrl,\r\n    withCredentials: true,\r\n    headers: {\r\n        'Accept': 'application/json',\r\n        'X-Requested-With': 'XMLHttpRequest'\r\n    }\r\n});\r\n\r\nexport default apiClient;","export const allowedUsers = ['Inbound', 'Outbound', 'Blended']\r\nexport const disallowedUsers = ['Normal']","import * as ActionTypes from \"./actionTypes\"\r\nimport axios from \"axios\"\r\nimport {cookieRoute, login, logout, user} from \"../shared/baseUrl\";\r\nimport apiClient from \"../services/apiClient\"\r\nimport {allowedUsers} from \"../config/user\";\r\n\r\nexport const loginUser = (username, password) => (dispatch) => {\r\n    dispatch(loading())\r\n    apiClient.get('/sanctum/csrf-cookie').then(response => {\r\n        // Login...\r\n        apiClient.post(login, {\r\n            username: username,\r\n            password: password\r\n        }).then(response => {\r\n            console.log(response)\r\n            if(response.status === 200) {\r\n                dispatch(loginSuccess())\r\n                apiClient.get(user).then(response => {\r\n                    //console.log(response)\r\n                    if(response.status === 200 && allowedUsers.indexOf(response.data.type) !== -1) {\r\n                        sessionStorage.setItem('loggedIn', true)\r\n                        dispatch(loginSuccess())\r\n                        dispatch(userSuccess(response.data))\r\n                    } else dispatch(logoutUser(true))\r\n                }).catch(error => {\r\n                    console.log(error)\r\n                })\r\n            } else if (response.status === 302) {\r\n                console.log(response)\r\n            }\r\n        }).catch(error => dispatch(logoutUser()))\r\n    })\r\n}\r\n\r\nexport const logoutUser = (message = false) => (dispatch) => {\r\n    dispatch(loading())\r\n    apiClient.post(logout).then(response => {\r\n        //console.log(response)\r\n        dispatch(logoutSuccess(message));\r\n        sessionStorage.removeItem('loggedIn');\r\n    })\r\n}\r\n\r\nexport const getUser = () => dispatch => {\r\n    dispatch(loading())\r\n    apiClient.get(cookieRoute).then((res) => {\r\n        apiClient.get(user).then(response => {\r\n            if(response.status === 200 && allowedUsers.indexOf(response.data.type) !== -1) {\r\n                //sessionStorage.setItem('loggedIn', true)\r\n                dispatch(userSuccess(response.data))\r\n            } else {\r\n                dispatch(logoutUser(true))\r\n            }\r\n        }).catch(error => {\r\n            if(error.response.status === 401) {\r\n                dispatch(logoutUser())\r\n            } else {\r\n                dispatch(userFailed(error.response.data))\r\n            }\r\n        })\r\n    })\r\n}\r\n\r\nexport const loading = () => ({\r\n    type: ActionTypes.LOGIN_LOADING\r\n})\r\n\r\nexport const loginSuccess = () => ({\r\n    type: ActionTypes.LOGIN_SUCCESS,\r\n    payload: true\r\n})\r\n\r\nexport const loginFailed = (message) => ({\r\n    type: ActionTypes.LOGIN_FAILED,\r\n    payload: message\r\n})\r\n\r\nexport const logoutSuccess = (error = false) => ({\r\n    type: ActionTypes.LOGOUT_SUCCESS,\r\n    payload: error\r\n})\r\n\r\nexport const userSuccess = (user) => ({\r\n    type: ActionTypes.USER_SUCCESS,\r\n    payload: user\r\n})\r\n\r\nexport const userFailed = (error) => ({\r\n    type: ActionTypes.USER_FAILED,\r\n    payload: error\r\n})","import React, {useEffect, useState} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {loginUser} from \"../redux/userActions\";\r\nimport {useHistory} from 'react-router-dom'\r\nimport {Form, Input, Button, Checkbox, Result} from \"antd\";\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loginUser: (username, password) => dispatch(loginUser(username, password))\r\n})\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.user\r\n    }\r\n}\r\n\r\nconst layout = {\r\n    labelCol: {\r\n        span: 8,\r\n    },\r\n    wrapperCol: {\r\n        span: 8,\r\n    },\r\n};\r\nconst tailLayout = {\r\n    wrapperCol: {\r\n        offset: 8,\r\n        span: 16,\r\n    },\r\n};\r\n\r\nconst Login = (props) => {\r\n\r\n    const [username, setUsername] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [error, setError] = useState(null)\r\n    let history = useHistory();\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        props.loginUser(username, password)\r\n    }\r\n\r\n    const onFinish = values => {\r\n        console.log('Success:', values);\r\n        props.loginUser(values.username, values.password)\r\n    };\r\n\r\n    const onFinishFailed = errorInfo => {\r\n        console.log('Failed:', errorInfo);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setError(props.user.errMess)\r\n    }, [props.user.errMess])\r\n\r\n    useEffect(() => {\r\n        if(props.user.loggedIn) {\r\n            setUsername('')\r\n            setPassword('')\r\n            history.push(\"/dashboard\")\r\n        } else {\r\n            console.log('what the hell')\r\n        }\r\n    }, [props.user.loggedIn])\r\n\r\n    return (\r\n\r\n        <Form\r\n            {...layout}\r\n            name=\"basic\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n            onFinishFailed={onFinishFailed}\r\n        >\r\n            {props.user.errMess ? <Result\r\n                status=\"403\"\r\n                title=\"403\"\r\n                subTitle=\"Sorry, you are not authorized to access this page.\"\r\n            /> : ''}\r\n            <Form.Item\r\n                label=\"Username\"\r\n                name=\"username\"\r\n                rules={[{ required: true, message: 'Please input your username!' }]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Password\"\r\n                name=\"password\"\r\n                rules={[{ required: true, message: 'Please input your password!' }]}\r\n            >\r\n                <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout} name=\"remember\" valuePropName=\"checked\">\r\n                <Checkbox>Remember me</Checkbox>\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login)","import React from \"react\";\r\nimport {\r\n    Form,\r\n    Input,\r\n    Tooltip,\r\n    Button,\r\n} from 'antd';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\n\r\nconst formItemLayout = {\r\n    labelCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 8 },\r\n    },\r\n    wrapperCol: {\r\n        xs: { span: 24 },\r\n        sm: { span: 16 },\r\n    },\r\n};\r\nconst tailFormItemLayout = {\r\n    wrapperCol: {\r\n        xs: {\r\n            span: 24,\r\n            offset: 0,\r\n        },\r\n        sm: {\r\n            span: 16,\r\n            offset: 8,\r\n        },\r\n    },\r\n};\r\n\r\nconst Register = () => {\r\n    const [form] = Form.useForm();\r\n\r\n    const onFinish = values => {\r\n        console.log('Received values of form: ', values);\r\n    };\r\n\r\n    return (\r\n        <Form\r\n            {...formItemLayout}\r\n            form={form}\r\n            name=\"register\"\r\n            onFinish={onFinish}\r\n            initialValues={{\r\n                residence: ['zhejiang', 'hangzhou', 'xihu'],\r\n                prefix: '86',\r\n            }}\r\n            scrollToFirstError\r\n        >\r\n            <Form.Item\r\n                name=\"email\"\r\n                label=\"E-mail\"\r\n                rules={[\r\n                    {\r\n                        type: 'email',\r\n                        message: 'The input is not valid E-mail!',\r\n                    },\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your E-mail!',\r\n                    },\r\n                ]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please input your password!',\r\n                    },\r\n                ]}\r\n                hasFeedback\r\n            >\r\n                <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"confirm\"\r\n                label=\"Confirm Password\"\r\n                dependencies={['password']}\r\n                hasFeedback\r\n                rules={[\r\n                    {\r\n                        required: true,\r\n                        message: 'Please confirm your password!',\r\n                    },\r\n                    ({ getFieldValue }) => ({\r\n                        validator(rule, value) {\r\n                            if (!value || getFieldValue('password') === value) {\r\n                                return Promise.resolve();\r\n                            }\r\n                            return Promise.reject('The two passwords that you entered do not match!');\r\n                        },\r\n                    }),\r\n                ]}\r\n            >\r\n                <Input.Password />\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                name=\"username\"\r\n                label={\r\n                    <span>\r\n                        Username&nbsp;\r\n                        <Tooltip title=\"What do you want others to call you?\">\r\n                            <QuestionCircleOutlined />\r\n                        </Tooltip>\r\n                    </span>\r\n                }\r\n                rules={[{ required: true, message: 'Please input your username!', whitespace: true }]}\r\n            >\r\n                <Input />\r\n            </Form.Item>\r\n\r\n            <Form.Item {...tailFormItemLayout}>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Register\r\n                </Button>\r\n            </Form.Item>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default Register","import * as ActionTypes from \"./actionTypes\"\r\nimport axios from \"axios\"\r\nimport apiClient from \"../services/apiClient\"\r\nimport {\r\n    agentLogin,\r\n    agentLogout,\r\n    agentNotReady,\r\n    agentReady,\r\n    cookieRoute,\r\n    getReason,\r\n    agentStatus,\r\n    isAgentReady, agentChannel, submitWorkcode\r\n} from \"../shared/baseUrl\";\r\n\r\naxios.defaults.withCredentials = true\r\n\r\nexport const loginAgent = () => dispatch => {\r\n    dispatch(loading())\r\n    apiClient.get(cookieRoute).then(response => {\r\n        apiClient.post(agentLogin)\r\n            .then(response => {\r\n                if(response.status === 200) {\r\n                    console.log(response)\r\n                    dispatch(loginSuccess(response.data?.data?.message))\r\n                    dispatch(getReasons())\r\n                }\r\n                else\r\n                    console.log(response)\r\n            }).catch(error => dispatch(loginFailed(error.response.data)))\r\n    })\r\n}\r\n\r\nexport const logoutAgent = () => dispatch => {\r\n    dispatch(loading())\r\n    apiClient.get(cookieRoute).then(response => {\r\n        apiClient.post(agentLogout)\r\n            .then(response => {\r\n                if(response.status === 200)\r\n                    dispatch(logoutSuccess())\r\n                else\r\n                    console.log(response)\r\n            }).catch(error => dispatch(logoutFailed(error.response.data)))\r\n    })\r\n}\r\n\r\nexport const isReadyAgent = () => dispatch => {\r\n    dispatch(loading())\r\n    apiClient.get(cookieRoute).then(() => {\r\n        apiClient.post(isAgentReady).then(response => {\r\n            if(response.status === 200)\r\n                dispatch(isAgentReadySuccess(response.data))\r\n            else\r\n                dispatch(isAgentReadyFailed('Failed to fetch agent status'))\r\n        }).catch(error => console.log(error))\r\n    })\r\n}\r\n\r\nexport const readyAgent = (reason?) => dispatch => {\r\n    dispatch(loading())\r\n    apiClient.get(cookieRoute).then(response => {\r\n        apiClient.post(agentReady, {\r\n            reason\r\n        })\r\n            .then(response => {\r\n                if(response.status === 200) {\r\n                    console.log(response)\r\n                    dispatch(readySuccess(response.data.data?.message))\r\n                    dispatch(isReadyAgent())\r\n                }\r\n                else\r\n                    console.log(response)\r\n            }).catch(error => dispatch(readyFailed(error.response.data)))\r\n    })\r\n}\r\n\r\nexport const notReadyAgent = (reason) => dispatch => {\r\n    console.log(reason)\r\n    dispatch(loading())\r\n    apiClient.get(cookieRoute).then(response => {\r\n        apiClient.post(agentNotReady, {\r\n            reason\r\n        }).then(response => {\r\n            if(response.status === 200) {\r\n                dispatch(notReadySuccess())\r\n                dispatch(isReadyAgent())\r\n            }\r\n            else\r\n                console.log(response)\r\n\r\n        }).catch(error => dispatch(notReadyFailed(error)))\r\n    })\r\n}\r\n\r\nexport const getReasons = () => dispatch => {\r\n    dispatch(loading())\r\n    apiClient.get(cookieRoute).then(response => {\r\n        apiClient.get(getReason)\r\n            .then(response => {\r\n                if(response.status === 200)\r\n                    dispatch(reasonSuccess(response.data.data))\r\n                else\r\n                    console.log(response)\r\n            }).catch(error => dispatch(reasonFailed(error.response.data)))\r\n    })\r\n}\r\n\r\nexport const getChannel = () => dispatch => {\r\n    apiClient.get(cookieRoute).then(response => {\r\n        apiClient.post(agentChannel)\r\n            .then(response => {\r\n                if(response.status === 200)\r\n                    dispatch(getChannelSuccess(response.data))\r\n            }).catch(error => dispatch(getChannelFailed(error.response.data)))\r\n    })\r\n}\r\n\r\nexport const sendWorkcode = (code, channel) => dispatch => {\r\n    dispatch(notReadyAgent(\"ACW_START\"))\r\n    apiClient.get(cookieRoute).then(response => {\r\n        apiClient.post(submitWorkcode, {\r\n            code,\r\n            channel\r\n        }).then(response => {\r\n            dispatch(submitWorkcodeSuccess(response.data))\r\n            dispatch(readyAgent(\"ACW_END\"))\r\n        }).catch(error => dispatch(submitWorkcodeFailed(error.response.data)))\r\n    })\r\n}\r\n\r\nexport const getChannelSuccess = channel => ({\r\n    type: ActionTypes.GETCHANNEL_SUCCESS,\r\n    payload: channel\r\n})\r\n\r\nexport const getChannelFailed = error => ({\r\n    type: ActionTypes.GETCHANNEL_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const submitWorkcodeSuccess = message => ({\r\n    type: ActionTypes.SUBMITWORKCODE_SUCCESS,\r\n    payload: message\r\n})\r\n\r\nexport const submitWorkcodeFailed = error => ({\r\n    type: ActionTypes.SUBMITWORKCODE_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const isAgentReadySuccess = status => ({\r\n    type: ActionTypes.ISREADY_SUCCESS,\r\n    payload: status\r\n})\r\n\r\nexport const isAgentReadyFailed = error => ({\r\n    type: ActionTypes.ISREADY_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const loginSuccess = (message) => ({\r\n    type: ActionTypes.QLOGIN_SUCCESS,\r\n    payload: message\r\n})\r\n\r\nexport const loginFailed = (error) => ({\r\n    type: ActionTypes.QLOGIN_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const logoutSuccess = () => ({\r\n    type: ActionTypes.QLOGOUT_SUCCESS\r\n})\r\n\r\nexport const logoutFailed = (error) => ({\r\n    type: ActionTypes.QLOGOUT_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const notReadySuccess = () => ({\r\n    type: ActionTypes.NOTREADY_SUCCESS\r\n})\r\n\r\nexport const notReadyFailed = error => ({\r\n    type: ActionTypes.NOTREADY_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const readyFailed = (error) => ({\r\n    type: ActionTypes.READY_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const readySuccess = (message) => ({\r\n    type: ActionTypes.READY_SUCCESS,\r\n    payload: message\r\n})\r\n\r\nexport const reasonSuccess = data => ({\r\n    type: ActionTypes.REASON_SUCCESS,\r\n    payload: data\r\n})\r\n\r\nexport const reasonFailed = (reason) => ({\r\n    type: ActionTypes.READY_FAILED,\r\n    error: reason\r\n})\r\n\r\nexport const workcodeSuccess = () => ({\r\n    type: ActionTypes.WORKCODE_SUCCESS\r\n})\r\n\r\nexport const workcodeFailed = error => ({\r\n    type: ActionTypes.WORKCODE_FAILED,\r\n    payload: error\r\n})\r\n\r\nexport const loading = () => ({\r\n    type: ActionTypes.AGENT_LOADING\r\n})","import * as ActionTypes from \"./actionTypes\"\r\nimport apiClient from \"../services/apiClient\"\r\nimport {agentStatus, cookieRoute} from \"../shared/baseUrl\";\r\n\r\nexport const fetchStatus = () => dispatch => {\r\n    dispatch(statusLoading())\r\n    apiClient.get(cookieRoute).then(response => {\r\n        apiClient.post(agentStatus)\r\n            .then(response => {\r\n                if(response.status === 200)\r\n                    dispatch(statusSuccess(response.data?.data))\r\n                else\r\n                    console.log(response)\r\n            }).catch(error => dispatch(statusFailed(error.response.data)))\r\n    })\r\n}\r\n\r\nexport const statusLoading = () => ({\r\n    type: ActionTypes.STATUS_LOADING\r\n})\r\n\r\nexport const statusSuccess = data => ({\r\n    type: ActionTypes.STATUS_SUCCESS,\r\n    payload: data\r\n})\r\n\r\nexport const statusFailed = (error) => ({\r\n    type: ActionTypes.STATUS_FAILED,\r\n    payload: error\r\n})","import React, {useEffect} from \"react\"\r\nimport {Card, Spin, Statistic} from \"antd\"\r\nimport {fetchStatus} from \"../redux/statsActions\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nconst gridStyle = {\r\n    width: '33%',\r\n    textAlign: 'center',\r\n}\r\n\r\nfunction QueueStats(props) {\r\n\r\n    const {stats, title} = props\r\n    const dispatch = useDispatch()\r\n    const nStats = useSelector(state => state.stats)\r\n\r\n    return(\r\n        <Spin size=\"large\" spinning={nStats.isLoading}>\r\n            <Card style={{textAlign: \"center\"}} title={title} bordered={false}>\r\n                {stats && Object.keys(stats).map((key, index) => {\r\n                    return <Card.Grid key={index} style={gridStyle}>\r\n                        <Statistic formatter={value => (<span style={{fontSize: '12px'}}>{value}</span>)} title={key} value={stats[key]} />\r\n                    </Card.Grid>\r\n                })}\r\n            </Card>\r\n        </Spin>\r\n    )\r\n}\r\n\r\nexport default QueueStats","import {Button, Row, Space} from \"antd\";\r\nimport {AudioMutedOutlined, PauseCircleFilled, PhoneTwoTone} from \"@ant-design/icons\";\r\nimport React from \"react\";\r\n\r\nconst KeyPad = (props) => {\r\n\r\n    const onCall = props.onCall\r\n    const onKeyPadClick = props.onKeyPadClick\r\n    const onMuteClick = props.onMuteClick\r\n    const onHoldClick = props.onHoldClick\r\n    const onHold = props.onHold\r\n    const onMute = props.onMute\r\n    const agentMode = props.agentMode\r\n\r\n    return(\r\n        <Space direction={\"vertical\"}>\r\n            {!agentMode && <>\r\n                <Row>\r\n                    <Space size={20} direction={\"horizontal\"}>\r\n                        {['1', '2', '3'].map((item, key) => (\r\n                            <Button onClick={() => onKeyPadClick(item)} key={key} size={\"large\"} type={\"primary\"}\r\n                                    shape={\"circle-outline\"}>{item}</Button>\r\n                        ))}\r\n                    </Space>\r\n                </Row>\r\n                <Row>\r\n                    <Space size={20} direction={\"horizontal\"}>\r\n                        {['4', '5', '6'].map((item, key) => (\r\n                            <Button onClick={() => onKeyPadClick(item)} key={key} size={\"large\"} type={\"primary\"}\r\n                                    shape={\"circle-outline\"}>{item}</Button>\r\n                        ))}\r\n                    </Space>\r\n                </Row>\r\n                <Row>\r\n                    <Space size={20} direction={\"horizontal\"}>\r\n                        {['7', '8', '9'].map((item, key) => (\r\n                            <Button onClick={() => onKeyPadClick(item)} key={key} size={\"large\"} type={\"primary\"}\r\n                                    shape={\"circle-outline\"}>{item}</Button>\r\n                        ))}\r\n                    </Space>\r\n                </Row>\r\n                <Row>\r\n                    <Space size={20} direction={\"horizontal\"}>\r\n                        {['#', '0', '*'].map((item, key) => (\r\n                            <Button onClick={() => onKeyPadClick(item)} key={key} size={\"large\"} type={\"primary\"}\r\n                                    shape={\"circle-outline\"}>{item}</Button>\r\n                        ))}\r\n                    </Space>\r\n                </Row>\r\n            </>}\r\n            <Row justify={\"center\"}>\r\n                <Space size={20} direction={\"horizontal\"}>\r\n                    <Button onClick={onMuteClick} disabled={!onCall} icon={<AudioMutedOutlined />} shape={\"circle\"} size={\"large\"} type={onMute ? \"danger\" : \"primary\"} />\r\n                    <Button onClick={props.onDialClick} style={{backgroundColor: !onCall ? '#4CAF50' : '#FF5252' }} shape={\"circle\"} icon={<PhoneTwoTone twoToneColor={!onCall ? \"#4CAF50\" : '#FF5252' }/>} size={\"large\"} />\r\n                    <Button onClick={onHoldClick} disabled={!onCall} icon={<PauseCircleFilled />} shape={\"circle\"} size={\"large\"} type={onHold ? \"danger\" : \"primary\"} />\r\n                </Space>\r\n            </Row>\r\n        </Space>\r\n    )\r\n}\r\n\r\nexport default KeyPad","import React, {useEffect} from \"react\"\r\nimport {Form, Input, Modal, Select} from \"antd\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendWorkcode} from \"../redux/agentActions\";\r\n\r\nexport const WorkcodeForm = ({setVisible, visible, channel}) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const workcode = useSelector(state => state.workcode)\r\n    const {workcodes} = workcode\r\n\r\n    const onCreate = values => {\r\n        dispatch(sendWorkcode(values.workcode, channel))\r\n        setVisible(false)\r\n    }\r\n\r\n    const [form] = Form.useForm();\r\n    return (\r\n        <Modal\r\n            visible={visible && channel}\r\n            title=\"Submit Work Code\"\r\n            okText=\"Create\"\r\n            centered={true}\r\n            closable={false}\r\n            onOk={() => {\r\n                form\r\n                    .validateFields()\r\n                    .then(values => {\r\n                        form.resetFields();\r\n                        onCreate(values);\r\n                    })\r\n                    .catch(info => {\r\n                        console.log('Validate Failed:', info);\r\n                    });\r\n            }}\r\n        >\r\n            <Form\r\n                form={form}\r\n                layout=\"horizontal\"\r\n                name=\"form_in_modal\"\r\n            >\r\n                <Form.Item\r\n                    name=\"workcode\"\r\n                    label=\"Workcode\"\r\n                    rules={[{ required: true, message: 'Please input the workcode!' }]}\r\n                >\r\n                    <Select>\r\n                        {workcodes.map((value, index) => (\r\n                            <Select.Option key={value.id} value={value.name}>{value.name}</Select.Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n    )\r\n}","import React, {useState, useEffect, useRef} from \"react\"\r\nimport {\r\n    Popover,\r\n    Switch,\r\n    Row,\r\n    Col,\r\n    Button,\r\n    Space,\r\n    Input,\r\n    Tag,\r\n    Typography,\r\n    Avatar,\r\n    notification,\r\n    Modal,\r\n    Select,\r\n    Spin\r\n} from \"antd\"\r\nimport {\r\n    PhoneTwoTone,\r\n    CheckCircleOutlined,\r\n    AlertTwoTone, PauseCircleFilled,\r\n    AudioMutedOutlined\r\n} from \"@ant-design/icons\"\r\nimport { FaHeadset, FaVolumeMute } from \"react-icons/fa\"\r\nimport KeyboardEventHandler from 'react-keyboard-event-handler'\r\nimport soundOne from \"../1.wav\"\r\nimport soundTwo from \"../2.wav\"\r\nimport soundThree from \"../3.wav\"\r\nimport soundFour from \"../4.wav\"\r\nimport soundFive from \"../5.wav\"\r\nimport soundSix from \"../6.wav\"\r\nimport soundSeven from \"../7.wav\"\r\nimport soundEight from \"../8.wav\"\r\nimport soundNine from \"../9.wav\"\r\nimport soundZero from \"../0.wav\"\r\nimport soundStar from \"../star.wav\"\r\nimport soundHash from \"../p.wav\"\r\nimport ring from \"../ring.mp3\"\r\nimport {\r\n    Invitation, InvitationAcceptOptions, Inviter, Referral,\r\n    Registerer,\r\n    RegistererState,\r\n    Session, SessionInviteOptions, SessionState,\r\n    UserAgent,\r\n    UserAgentDelegate,\r\n    UserAgentOptions, Web\r\n} from \"sip.js\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {getChannel, isReadyAgent, loginAgent, logoutAgent, notReadyAgent, readyAgent} from \"../redux/agentActions\";\r\nimport QueueStats from \"../components/QueueStats\"\r\nimport KeyPad from \"../components/KeyPad\"\r\nimport {workcode} from \"../redux/workcode\";\r\nimport {getUser} from \"../redux/userActions\";\r\nimport {fetchStatus} from \"../redux/statsActions\";\r\nimport {WorkcodeForm} from \"../components/WorkcodeForm\";\r\n\r\nconst marginStyles = {\r\n    marginBottom: '10px'\r\n}\r\n\r\nexport default function Softphone(props) {\r\n\r\n    // Audio Files\r\n    const audios = [new Audio(soundZero),new Audio(soundOne),new Audio(soundTwo),new Audio(soundThree),new Audio(soundFour),new Audio(soundFive),new Audio(soundSix),new Audio(soundSeven),new Audio(soundEight),new Audio(soundNine),new Audio(soundHash),new Audio(soundStar)]\r\n    /*const incomingRing = new Audio(ring)*/\r\n    const [incomingRing] = useState(new Audio(ring))\r\n\r\n    const dispatch = useDispatch()\r\n    const agent = useSelector(state => state.agent)\r\n    const stats = useSelector(state => state.stats)\r\n    const options = agent.reasons.map(value => (value.name))\r\n    const workcode = useSelector(state => state.workcode)\r\n    /*const workcodes = workcode.workcode.map(value => value.name)*/\r\n\r\n    useEffect(() => {\r\n        dispatch(getUser())\r\n    }, [])\r\n\r\n    const userAgentDelegate: UserAgentDelegate = {\r\n        onConnect() {\r\n            setConnection(true)\r\n            openNotificationWithIcon(\"success\", \"UA has been connected\")\r\n        },\r\n        onDisconnect(error?: Error) {\r\n            setConnection(false)\r\n            openNotificationWithIcon(\"error\", \"UA has been disconnected\")\r\n\r\n            // On disconnect, cleanup invalid registrations\r\n            /*registerer.unregister()\r\n                .catch((e: Error) => {\r\n                    // Unregister failed\r\n                });\r\n            // Only attempt to reconnect if network/server dropped the connection (if there is an error)\r\n            if (error) {\r\n                attemptReconnection();\r\n            }*/\r\n        },\r\n        onRegister(registration) {\r\n            // Registered UA\r\n        },\r\n        onInvite(invitation: Invitation) {\r\n\r\n            setIncomingSession(invitation)\r\n            setIncomingCall(true)\r\n            setIncomingNumber(invitation.remoteIdentity.uri.user)\r\n\r\n            // Setup incoming session delegate\r\n            invitation.delegate = {\r\n                // Handle incoming REFER request.\r\n                onRefer(referral: Referral): void {\r\n                    // ...\r\n                },\r\n            };\r\n\r\n            // Handle incoming session state changes.\r\n            invitation.stateChange.addListener((newState: SessionState) => {\r\n                switch (newState) {\r\n                    case SessionState.Establishing:\r\n                        // Session is establishing.\r\n                        break;\r\n                    case SessionState.Established:\r\n                        // Session has been established.\r\n                        console.info('Session is established')\r\n                        setIncomingCall(false)\r\n                        setOnCall(true)\r\n                        setCallStatus(\"CALL CONNECTED\")\r\n                        setupRemoteMedia(invitation)\r\n\r\n                        // Dispatch fetch channel\r\n                        dispatch(getChannel())\r\n\r\n                        break;\r\n                    case SessionState.Terminated:\r\n                        // Session has terminated.\r\n                        console.info('Session has terminated')\r\n                        setIncomingCall(false)\r\n                        setOnCall(false)\r\n                        setIncomingNumber('')\r\n                        setIncomingSession(false)\r\n                        setCallStatus(\"CALL DISCONNECTED\")\r\n                        setWorkcodeVisible(true)\r\n                        cleanupMedia()\r\n\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n\r\n            // Handle incoming INVITE request.\r\n            let constrainsDefault: MediaStreamConstraints = {\r\n                audio: true,\r\n                video: false,\r\n            }\r\n\r\n            const options: InvitationAcceptOptions = {\r\n                sessionDescriptionHandlerOptions: {\r\n                    constraints: constrainsDefault,\r\n                },\r\n            }\r\n\r\n            Modal.confirm({\r\n                title: \"Incoming call\",\r\n                icon: <PhoneTwoTone />,\r\n                content: invitation.remoteIdentity.uri.user,\r\n                okText: \"Accept\",\r\n                cancelText: \"Reject\",\r\n                onOk: () => {\r\n                    invitation.accept(options)\r\n                },\r\n                onCancel: () => {\r\n                    invitation.reject()\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const registererState = (state: RegistererState) => {\r\n        switch (state) {\r\n            default:\r\n                break\r\n            case RegistererState.Registered:\r\n                setRegister(true)\r\n                openNotificationWithIcon(\"success\", \"UA has been registered\")\r\n                break\r\n            case RegistererState.Unregistered:\r\n                setRegister(false)\r\n                openNotificationWithIcon(\"error\", \"UA has been unregistered\")\r\n                break\r\n        }\r\n    }\r\n\r\n    // Set workode flag if call has been answered\r\n    const [workcodeVisible, setWorkcodeVisible] = useState(false)\r\n\r\n    const [server, setServer] = useState(null)\r\n\r\n    const [userName, setUserName] = useState(null)\r\n    const [userType, setUserType] = useState(null)\r\n    const [name, setName] = useState(null)\r\n\r\n    const [userAgent, setUserAgent] = useState(null)\r\n    const [registerer, setRegisterer] = useState(null)\r\n\r\n    // Set Agent Mode\r\n    const [agentMode, setAgentMode] = useState(false)\r\n    const [blendMode, setBlendMode] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if(props.system.settings && props.user.user) {\r\n            setServer(props.system.settings.server_address)\r\n            setName(props.user.user.name)\r\n            setUserName(props.user.user.auth_username)\r\n            setUserType(props.user.user.type)\r\n            setAgentMode(props.user.user.type === \"Inbound\")\r\n            setBlendMode(props.user.user.type === \"Blended\")\r\n\r\n            const userAgent = new UserAgent({\r\n                authorizationUsername: props.user.user.auth_username,\r\n                authorizationPassword: props.user.user.auth_password,\r\n                transportOptions: {\r\n                    server: `wss://${props.system.settings.server_address}:${props.system.settings.wss_port}/ws`\r\n                },\r\n                uri: UserAgent.makeURI(`sip:${props.user.user.auth_username}@${props.system.settings.server_address}`),\r\n                delegate: userAgentDelegate,\r\n                logLevel: \"error\"\r\n            })\r\n\r\n            const registerer = new Registerer(userAgent)\r\n\r\n            setUserAgent(userAgent)\r\n            setRegisterer(registerer)\r\n\r\n            console.log('Registering UA...')\r\n            userAgent.start()\r\n            registerer.stateChange.addListener(registererState)\r\n        }\r\n        return () => {\r\n            if(registerer) {\r\n                registerer.stateChange.removeListener(registererState)\r\n            }\r\n        }\r\n    }, [props.system.settings, props.user.user])\r\n\r\n    /*const server = \"192.168.144.152\"\r\n    const wss_port = \"8089\"*/\r\n\r\n    /*const userName = \"1001\"\r\n    const secret = \"1001\"\r\n    const uri = UserAgent.makeURI(`sip:${userName}@${server}`)\r\n    const name = \"Abdullah Basit\"\r\n    const userType = \"Blended\"*/\r\n\r\n    /*const transportOptions = {\r\n        server: `wss://${server}:${wssPort}/ws`\r\n    }*/\r\n\r\n    /*const userAgentOptions: UserAgentOptions = {\r\n        authorizationUsername: userName,\r\n        authorizationPassword: secret,\r\n        transportOptions,\r\n        uri,\r\n        delegate: userAgentDelegate,\r\n        logLevel: \"error\"\r\n    }*/\r\n\r\n    /*useEffect(() => {\r\n        console.log('UA and registerer')\r\n        if(userAgent && registerer) {\r\n            userAgent.start()\r\n            registerer.stateChange.addListener(registererState)\r\n        }\r\n        return () => {\r\n            if(registerer) {\r\n                registerer.stateChange.removeListener(registererState)\r\n            }\r\n        }\r\n    }, [])*/\r\n\r\n    // Phone methods\r\n    const registerPhone = () => {\r\n        if(registerer.state === RegistererState.Registered) {\r\n            registerer.unregister()\r\n                .then(r => {\r\n                    console.info(\"UA unregistered\")\r\n                    if(agentMode || blendMode)\r\n                        dispatch(logoutAgent())\r\n                })\r\n        } else {\r\n            registerer.register()\r\n                .then(r => {\r\n                    console.info(\"UA registered\")\r\n                    if(agentMode || blendMode) {\r\n                        dispatch(loginAgent())\r\n                    }\r\n                })\r\n        }\r\n    }\r\n\r\n    // Not Ready option select\r\n    let optionValue = ''\r\n\r\n    // Register & Socket\r\n    const [register, setRegister] = useState(false)\r\n    const [connection, setConnection] = useState(false)\r\n\r\n    // Call Status\r\n    const [onCall, setOnCall] = useState(false)\r\n    const [callStatus, setCallStatus] = useState('DISCONNECTED')\r\n\r\n    // Incoming Call\r\n    const [incomingCall, setIncomingCall] = useState(false)\r\n    const [incomingNumber, setIncomingNumber] = useState('')\r\n    const [incomingSession, setIncomingSession] = useState(false)\r\n\r\n    // Outgoing Call\r\n    const [outgoingCall, setOutgoingCall] = useState(false)\r\n    const [outgoingNumber, setOutgoingNumber] = useState('')\r\n    const [outgoingSession, setOutgoingSession] = useState(false)\r\n\r\n    // Hold & Mute\r\n    const [onHold, setOnHold] = useState(false)\r\n    const [onMute, setOnMute] = useState(false)\r\n\r\n    // Input number\r\n    const [inputNumber, setInputNumber] = useState('')\r\n\r\n    // Timer\r\n    const [timer, setTimer] = useState('00:00:00')\r\n    const [intervalId, setIntervalId] = useState(null)\r\n\r\n    // Media Element\r\n    const mediaElement = useRef()\r\n    const [remoteStream] = useState(new MediaStream())\r\n\r\n    useEffect(() => {\r\n        if(agent.message)\r\n            openNotificationWithIcon('info', agent.message)\r\n    }, [agent.message])\r\n\r\n    // Set fetch stats\r\n    useEffect(() => {\r\n        dispatch(isReadyAgent())\r\n        dispatch(fetchStatus())\r\n        const interval = setInterval(() => {\r\n            dispatch(fetchStatus())\r\n            //console.log('This will run every 5000 seconds!');\r\n        }, 30000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    const setupRemoteMedia = (session: Session) => {\r\n        session.sessionDescriptionHandler.peerConnection.getReceivers()\r\n            .forEach((receiver) => {\r\n            if (receiver.track) {\r\n                remoteStream.addTrack(receiver.track);\r\n            }\r\n        });\r\n        mediaElement.current.srcObject = remoteStream;\r\n        mediaElement.current.play();\r\n    }\r\n\r\n    const cleanupMedia = () => {\r\n        mediaElement.current.srcObject = null\r\n        mediaElement.current.pause()\r\n    }\r\n\r\n    // play audio sound\r\n    const playSound = (item) => {\r\n        audios[item].play();\r\n    }\r\n\r\n    const startRing = () => {\r\n        incomingRing.loop = true\r\n        incomingRing.play()\r\n    }\r\n\r\n    // stop audio sound\r\n    const stopRing = () => {\r\n        incomingRing.pause()\r\n        incomingRing.currentTime = 0\r\n    }\r\n\r\n    // load audio file on component load\r\n    useEffect(() => {\r\n        audios.forEach((value, index) => {\r\n            value.load()\r\n            value.loop = false\r\n        })\r\n        incomingRing.load()\r\n        incomingRing.loop = true\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(onCall) {\r\n            let SECONDS = 0\r\n            const id = setInterval(() => {\r\n                SECONDS++;\r\n                setTimer(new Date(SECONDS * 1000).toISOString().substr(11, 8))\r\n            }, 1000)\r\n            setIntervalId(id)\r\n        } else {\r\n            clearInterval(intervalId)\r\n        }\r\n        return () => clearInterval(intervalId)\r\n    }, [onCall])\r\n\r\n    useEffect(() => {\r\n        if(incomingCall) {\r\n            startRing()\r\n        } else {\r\n            stopRing()\r\n            Modal.destroyAll()\r\n        }\r\n        /*return () => Modal.destroyAll()*/\r\n    }, [incomingCall])\r\n\r\n    /*useEffect(() => {\r\n        if(blendMode) {\r\n            if(!receiveIncoming) {\r\n                userAgent.delegate.onInvite = (invitation: Invitation) => {\r\n                    invitation.reject()\r\n                }\r\n            } else {\r\n                userAgent.delegate.onInvite = userAgentDelegate.onInvite\r\n            }\r\n        }\r\n    }, [receiveIncoming])*/\r\n\r\n    const openNotificationWithIcon = (type, message) => {\r\n        notification[type]({\r\n            message: 'Notification',\r\n            description: message\r\n        });\r\n    };\r\n\r\n    const onDialClick = () => {\r\n        const currentSession = incomingSession || outgoingSession\r\n        if(currentSession) {\r\n            if(currentSession instanceof Inviter && currentSession.state === SessionState.Establishing) {\r\n                currentSession.cancel()\r\n            } else if (currentSession instanceof Invitation && currentSession.state === SessionState.Established) {\r\n                currentSession.bye()\r\n            } else {\r\n                currentSession.bye()\r\n            }\r\n        } else if (!agentMode) {\r\n            // Dial outbound call\r\n            const target = UserAgent.makeURI(`sip:${inputNumber}@${server}`)\r\n            const inviter = new Inviter(userAgent, target)\r\n\r\n            inviter.stateChange.addListener((state: SessionState) => {\r\n                console.log(`Session state changed to ${state}`);\r\n                switch (state) {\r\n                    case SessionState.Initial:\r\n                        break;\r\n                    case SessionState.Establishing:\r\n                        break;\r\n                    case SessionState.Established:\r\n                        setCallStatus(\"CALL CONNECTED\")\r\n                        setupRemoteMedia(inviter)\r\n                        break;\r\n                    case SessionState.Terminating:\r\n                    // fall through\r\n                    case SessionState.Terminated:\r\n                        Modal.destroyAll()\r\n                        setOutgoingCall(false)\r\n                        setOnCall(false)\r\n                        setOutgoingNumber('')\r\n                        setOutgoingSession(false)\r\n                        setCallStatus(\"CALL DISCONNECTED\")\r\n                        cleanupMedia()\r\n                        break;\r\n                    default:\r\n                        throw new Error(\"Unknown session state.\")\r\n                }\r\n            })\r\n\r\n            inviter.invite()\r\n            setOutgoingSession(inviter)\r\n            setOutgoingCall(true)\r\n            setOnCall(true)\r\n        }\r\n    }\r\n\r\n    const onKeyPadClick = (item) => {\r\n        switch (item) {\r\n            default:\r\n                break\r\n            case \"1\":\r\n            case \"2\":\r\n            case \"3\":\r\n            case \"4\":\r\n            case \"5\":\r\n            case \"6\":\r\n            case \"7\":\r\n            case \"8\":\r\n            case \"9\":\r\n            case \"0\":\r\n                playSound(item)\r\n                setInputNumber(inputNumber + item)\r\n                break\r\n            case \"*\":\r\n                playSound(11)\r\n                setInputNumber(inputNumber + item)\r\n                break\r\n            case \"#\":\r\n                playSound(10)\r\n                setInputNumber(inputNumber + \"#\")\r\n                break\r\n        }\r\n    }\r\n\r\n    const onKeyPress = (key, event) => {\r\n        switch (key) {\r\n            default:\r\n                break\r\n            case \"1\":\r\n            case \"2\":\r\n            case \"3\":\r\n            case \"4\":\r\n            case \"5\":\r\n            case \"6\":\r\n            case \"7\":\r\n            case \"8\":\r\n            case \"9\":\r\n            case \"0\":\r\n                playSound(key)\r\n                if(event.target === document.getElementsByTagName('body')[0]) {\r\n                    setInputNumber(inputNumber + key)\r\n                }\r\n                break\r\n            case \"shift+8\":\r\n            case \"*\":\r\n                playSound(11)\r\n                if(event.target === document.getElementsByTagName('body')[0]) {\r\n                    setInputNumber(inputNumber + \"*\")\r\n                }\r\n                break\r\n            case \"shift+3\":\r\n                playSound(10)\r\n                if(event.target === document.getElementsByTagName('body')[0]) {\r\n                    setInputNumber(inputNumber + \"#\")\r\n                }\r\n                break\r\n            case \"backspace\":\r\n                if(event.target === document.getElementsByTagName('body')[0]) {\r\n                    setInputNumber(inputNumber.slice(0, -1))\r\n                }\r\n                break\r\n        }\r\n    }\r\n\r\n    const hold = (session: Session) => {\r\n        const options: SessionInviteOptions = {\r\n            sessionDescriptionHandlerModifiers: [Web.holdModifier]\r\n        }\r\n\r\n        if (session) {\r\n            session.invite(options);\r\n        }\r\n    }\r\n\r\n    const unhold = (session: Session) => {\r\n        const options: SessionInviteOptions = {\r\n            sessionDescriptionHandlerModifiers: []\r\n        }\r\n\r\n        if (session) {\r\n            session.invite(options);\r\n        }\r\n    }\r\n\r\n    const onHoldClick = () => {\r\n        if(!onHold) {\r\n            if(incomingSession) {\r\n                hold(incomingSession)\r\n            } else if (outgoingSession) {\r\n                hold(outgoingSession)\r\n            }\r\n            setOnHold(true)\r\n        } else {\r\n            if(incomingSession) {\r\n                unhold(incomingSession)\r\n            } else if (outgoingSession) {\r\n                unhold(outgoingSession)\r\n            }\r\n            setOnHold(false)\r\n        }\r\n    }\r\n\r\n    const onMuteClick = () => {\r\n        setOnMute(!onMute)\r\n        const currentSession = incomingSession || outgoingSession\r\n        let pc = currentSession.sessionDescriptionHandler.peerConnection\r\n        // Get local tracks\r\n        let senders = pc.getSenders()\r\n        if(senders.length) {\r\n            senders.forEach((sender) => {\r\n                if(sender.track) {\r\n                    sender.track.enabled = onMute\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    const onPause = () => {\r\n        if(agent.isReady) {\r\n            Modal.confirm({\r\n                title: \"Specify Reason\",\r\n                centered: true,\r\n                content: (\r\n                    <Select onSelect={value => optionValue = value} style={{width: '100%'}} defaultValue={options[0]}>\r\n                        {options.map((value, index) => (\r\n                            <Select.Option value={value} key={index}>{value}</Select.Option>\r\n                        ))}\r\n                    </Select>\r\n                ),\r\n                onOk: () => {\r\n                    dispatch(notReadyAgent(optionValue))\r\n                },\r\n                onCancel: () => {\r\n                    // Do Nothing\r\n                }\r\n            })\r\n        } else {\r\n            dispatch(readyAgent())\r\n        }\r\n    }\r\n\r\n    /*const onCallDisconnect = () => {\r\n        Modal.confirm({\r\n            title: \"Specify Workcode\",\r\n            centered: true,\r\n            content: (\r\n                <Select>\r\n                    {workcodes.map((value, index) => (\r\n                        <Select.Option value={value} key={index}>{value}</Select.Option>\r\n                    ))}\r\n                </Select>\r\n            ),\r\n            onOk: () => {\r\n\r\n            },\r\n            onCancel: () => {\r\n\r\n            }\r\n        })\r\n    }*/\r\n\r\n    return(\r\n        <Spin spinning={agent.isLoading}>\r\n            <KeyboardEventHandler\r\n                handleKeys={['0', '1', '2', '3' ,'4', '5', '6', '7', '8', '9', 'shift+3', '*', 'shift+8', 'backspace']}\r\n                onKeyEvent={onKeyPress}\r\n                handleFocusableElements={true}\r\n            />\r\n            <WorkcodeForm setVisible={setWorkcodeVisible} channel={agent.currentChannel} visible={workcodeVisible} />\r\n            <Row gutter={20}>\r\n                <Col xs={24} lg={8} style={marginStyles}>\r\n                    <QueueStats title=\"Queue Stats\" stats={stats.status[0]} />\r\n                </Col>\r\n                <Col style={marginStyles} xs={24} lg={{span: 8}}>\r\n                    <Row align={\"middle\"} style={{marginBottom: 10}} justify={\"space-between\"}>\r\n                        <Col>\r\n                            <Button size=\"small\" onClick={onPause} danger={!agent.isReady} type=\"primary\" shape={\"round\"} icon={<PauseCircleFilled />}>{!agent.isReady ? `Ready` : `Not-Ready`}</Button>\r\n                        </Col>\r\n                        <Col>\r\n                            <Button size=\"small\" onClick={registerPhone} danger={!register} type=\"primary\" shape=\"round\" icon={<AlertTwoTone twoToneColor=\"#52c41a\" />}>\r\n                                {register ? \"Unregister\" : \"Register\"}\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n                    <div style={{marginBottom: 10}}>\r\n                        <Tag icon={<CheckCircleOutlined />} color={connection ? \"success\" : \"error\"}>\r\n                            {connection ? \"connected\" : \"disconnected\"}\r\n                        </Tag>\r\n                        <Tag style={{float: \"right\", marginRight: '0px'}} icon={<CheckCircleOutlined />} color={register ? \"success\" : \"error\"}>\r\n                            {register ? \"registered\" : \"unregistered\"}\r\n                        </Tag>\r\n                    </div>\r\n                    <div style={{marginBottom: 10}}>\r\n                        <Typography.Text keyboard strong>{name}</Typography.Text>\r\n                        <Typography.Text strong style={{float: 'right'}} keyboard>{userName}</Typography.Text>\r\n                    </div>\r\n                    {onCall && <>\r\n                        <Row style={{marginBottom: 10}} gutter={[10, 0]} justify={\"center\"}>\r\n                            <Col>\r\n                                <Tag color={onCall ? \"success\" : \"error\"}>\r\n                                    {callStatus}\r\n                                </Tag>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row style={{marginBottom: 10}} gutter={[5, 10]} justify={\"center\"}>\r\n                            <Typography.Text code strong>{timer}</Typography.Text>\r\n                        </Row>\r\n                    </>}\r\n                    {onHold || onMute ? <Row style={{marginBottom: 10}} gutter={[5, 10]} justify={\"center\"}>\r\n                        {onHold && <Col><Avatar icon={<FaVolumeMute />} size={\"large\"} /></Col>}\r\n                        {onMute && <Col><Avatar icon={<FaHeadset />} size={\"large\"} /></Col>}\r\n                    </Row> : ''}\r\n                    <Row justify={\"center\"}>\r\n                        <Col style={{marginBottom: 10}} lg={24}>\r\n                            <Input disabled={onCall || agentMode} onChange={event => setInputNumber(event.target.value)} value={inputNumber || incomingNumber} autoFocus size=\"large\" placeholder=\"Phone Number Here\" prefix={<PhoneTwoTone />} />\r\n                        </Col>\r\n                        <Col>\r\n                            <audio ref={mediaElement} />\r\n                            <KeyPad agentMode={agentMode} onHold={onHold} onMute={onMute} onMuteClick={onMuteClick} onHoldClick={onHoldClick} onKeyPadClick={onKeyPadClick} onDialClick={onDialClick} onCall={onCall} />\r\n                        </Col>\r\n                    </Row>\r\n                </Col>\r\n                <Col xs={24} lg={8}>\r\n                    <QueueStats title=\"Agent Stats\" stats={stats.status[1]} />\r\n                </Col>\r\n            </Row>\r\n        </Spin>\r\n    )\r\n}","import * as ActionTypes from './actionTypes'\r\nimport apiClient from \"../services/apiClient\";\r\nimport {cookieRoute, getSystem} from \"../shared/baseUrl\";\r\n\r\nexport const getSettings = () => dispatch => {\r\n    dispatch(loading())\r\n    apiClient.get(cookieRoute).then(response => {\r\n        apiClient.get(getSystem).then(response => {\r\n            //console.log(response)\r\n            if(response.status === 200)\r\n                dispatch(settingSuccess(response.data.data))\r\n            else\r\n                console.log(response)\r\n        }).catch(error => dispatch(settingFailed(error.response.data)))\r\n    })\r\n}\r\n\r\nexport const loading = () => ({\r\n    type: ActionTypes.SYSTEM_LOADING\r\n})\r\n\r\nexport const settingSuccess = (setting) => ({\r\n    type: ActionTypes.SYSTEM_SUCCESS,\r\n    payload: setting\r\n})\r\n\r\nexport const settingFailed = (error) => ({\r\n    type: ActionTypes.SYSTEM_FAILED,\r\n    payload: error\r\n})","import * as ActionTypes from \"./actionTypes\"\r\nimport apiClient from \"../services/apiClient\"\r\nimport {cookieRoute, getWorkcodes} from \"../shared/baseUrl\";\r\n\r\nexport const fetchWorkcodes = () => dispatch => {\r\n    apiClient.get(cookieRoute).then(() => {\r\n        apiClient.get(getWorkcodes).then(response => {\r\n            if(response.status === 200)\r\n                dispatch(getWorkcodeSuccess(response.data.data))\r\n            else\r\n                dispatch(getWorkcodeFailed(\"Work codes Fetch failed\"))\r\n        }).catch(error => dispatch(getWorkcodeFailed(error.response.data)))\r\n    })\r\n}\r\n\r\nexport const loading = () => ({\r\n    type: ActionTypes.WORKCODE_LOADING\r\n})\r\n\r\nexport const getWorkcodeSuccess = (workcodes) => ({\r\n    type: ActionTypes.GETWORKCODE_SUCCESS,\r\n    payload: workcodes\r\n})\r\n\r\nexport const getWorkcodeFailed = (error) => ({\r\n    type: ActionTypes.GETWORKCODE_FAILED,\r\n    payload: error\r\n})","import React, {useEffect, useState} from \"react\"\r\nimport {Redirect, Route, Switch, Link, useLocation} from \"react-router-dom\"\r\nimport Login from \"./Login\"\r\nimport Register from \"./Register\"\r\nimport {useDispatch, useSelector} from \"react-redux\"\r\nimport {getUser, logoutUser} from \"../redux/userActions\"\r\nimport { Layout, Menu, Breadcrumb, Button, Spin } from 'antd'\r\nimport Softphone from \"./Softphone\"\r\nimport {getSettings} from \"../redux/systemActions\";\r\nimport {fetchWorkcodes} from \"../redux/workcodeActions\";\r\n\r\nfunction Main() {\r\n\r\n    const { Header, Content, Footer } = Layout;\r\n\r\n    const user = useSelector(state => state.user)\r\n    const system = useSelector(state => state.system)\r\n    const dispatch = useDispatch()\r\n    let location = useLocation()\r\n\r\n    const handleLogout = () => {\r\n        dispatch(logoutUser())\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(user.loggedIn) {\r\n            console.log('happening')\r\n            dispatch(getSettings())\r\n            dispatch(fetchWorkcodes())\r\n        }\r\n    }, [user.loggedIn])\r\n\r\n    return(\r\n\r\n        <Layout className=\"layout\">\r\n            <Header hasSider={false} style={{backgroundColor: '#fff'}}>\r\n                {/*<div className=\"logo\" />*/}\r\n                <Menu inlineCollapsed={false} theme=\"light\" mode=\"horizontal\" defaultSelectedKeys={['1']} selectedKeys={[location.pathname]}>\r\n                    <Menu.Item>\r\n                        <Link to={\"/\"}>\r\n                            <div className=\"logo\" />\r\n                        </Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"/sign-in\">\r\n                        <Link to=\"/sign-in\">Login</Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"/sign-up\">\r\n                        <Link to=\"/sign-up\">Register</Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"/dashboard\">\r\n                        <Link to=\"/dashboard\">App</Link>\r\n                    </Menu.Item>\r\n                    <Menu.Item key=\"/logout\">\r\n                       <Button type={\"link\"} onClick={handleLogout}>Logout</Button>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Header>\r\n            <Content style={{ padding: '0 10px' }}>\r\n                <Breadcrumb style={{ margin: '16px 0' }}>\r\n                    <Breadcrumb.Item>App</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>Dashboard</Breadcrumb.Item>\r\n                </Breadcrumb>\r\n                <Spin spinning={user.isLoading || system.isLoading}>\r\n                    <div className=\"site-layout-content\">\r\n                        <Switch>\r\n                            <Route exact path='/' component={Login} />\r\n                            <Route path=\"/sign-in\" component={Login} />\r\n                            <Route path=\"/sign-up\" component={Register} />\r\n                            <PrivateRoute path=\"/dashboard\">\r\n                                <Softphone user={user} system={system} />\r\n                            </PrivateRoute>\r\n                        </Switch>\r\n                    </div>\r\n                </Spin>\r\n            </Content>\r\n            <Footer style={{ textAlign: 'center' }}>Contact Plus © 2020 Created by <a href=\"mailto:abdullah_basit@telecard.com.pk\">Dev Team @ Telecard</a></Footer>\r\n        </Layout>\r\n    )\r\n}\r\n\r\n// A wrapper for <Route> that redirects to the login\r\n// screen if you're not yet authenticated.\r\nfunction PrivateRoute({ children, ...rest }) {\r\n\r\n    const user = useSelector(state => state.user)\r\n    const [path] = useState(\"/sign-in\")\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({ location }) =>\r\n                user.loggedIn ? (\r\n                    children\r\n                ) : (\r\n                    <Redirect\r\n                        to={{\r\n                            pathname: path,\r\n                            state: { from: location }\r\n                        }}\r\n                    />\r\n                )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nexport default Main","import React from 'react';\nimport 'antd/dist/antd.css'\nimport './App.css';\nimport {ConfigureStore} from \"./redux/store\"\nimport Main from \"./pages/Main\";\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter as Router} from \"react-router-dom\";\n\nconst store = ConfigureStore()\n\nfunction App() {\n\n  return (\n      <Provider store={store}>\n          <Router>\n              <Main />\n          </Router>\n      </Provider>\n  );\n}\n\nexport default App;\n","import {applyMiddleware, createStore, combineReducers} from \"redux\";\r\nimport logger from 'redux-logger'\r\nimport thunk from \"redux-thunk\"\r\nimport {user} from \"./user\"\r\nimport {agent} from \"./agent\";\r\nimport {system} from \"./system\";\r\nimport {stats} from \"./stats\";\r\nimport {workcode} from \"./workcode\";\r\n\r\nexport const ConfigureStore = () => {\r\n    return createStore(combineReducers({\r\n        user,\r\n        agent,\r\n        system,\r\n        stats,\r\n        workcode\r\n    }), applyMiddleware(thunk, logger))\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.Fragment>\n      <App />\n  </React.Fragment>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}